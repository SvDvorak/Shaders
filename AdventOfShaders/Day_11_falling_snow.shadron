#extension gif
#include <math_constants>
#include <affine_transform>
#include <perlin>

const ivec2 FLAKESIZE = ivec2(128);
const float FOV = 0.3*PI;
const float NEAR = 1.0/256.0, FAR = 256.0;
const vec3 center = vec3(0, -0.4, -6);

parameter int Levels = 1 : range(0, 7);
parameter int Edges = 3 : range(1, 5);
parameter int ParticleCount = 300 : range(100, 1000);

parameter float FlakeSize = 0.2 : range(0.1, 3.0);

glsl vec4 kochFlake(int index, int edges, int levels, int slopeModifier) {
   vec2[5] points = vec2[5](
        vec2(0.0, 0.0),
        vec2(1.0/3.0, 0.0),
        vec2(0.5, 0.5/3.0*ROOT3),
        vec2(2.0/3.0, 0.0),
        vec2(1.0, 0.0)
    );

    float[5] slopes = float[5](
        0, PI/3, -PI/3, 0, 0
    );

    int total = int(pow(2, levels*2));
    vec2 point = vec2(0, 0);
    float slope = 0;
    vec2 offset = vec2(0.5, -0.25*(edges-2));

    // Figure out what edge we're on
    for(int edgeNr = index/total; edgeNr > 0; edgeNr--) {
        point += rotate(points[4], slope);
        slope += -TAU/edges;
        index -= total;
    }

    for(int currentLevel = levels; currentLevel > 0; currentLevel--) {
        int partSize = total/4;
        int lowerBound = index/partSize;
        index -= lowerBound*partSize;

        vec2 nextPoint = points[lowerBound]*pow(1.0/3.0, levels-currentLevel);
        point += rotate(nextPoint, slope);
        slope += slopeModifier*slopes[lowerBound];
        total = partSize;
    }

    return vec4(point - offset, 0, 1);
}

glsl vec4 normalFlake(int index) {
    return kochFlake(index, Edges, Levels, 1);
}

model image NormalFlake :
    background(vec4(vec3(0), 1)),
    dimensions(FLAKESIZE),
    vertex(normalFlake, line_strip, pow(2, Levels*2)*Edges + 1);


glsl vec4 weirdFlake(int index) {
    return kochFlake(index, Edges, Levels - 2, -1);
}

model image WeirdFlake :
    background(vec4(vec3(0), 1)),
    dimensions(FLAKESIZE),
    vertex(weirdFlake, line_strip, pow(2, (Levels-2)*2)*Edges + 1),
    map(clamp);


glsl vec4 combinedFlake(vec2 pos) {
    float weirdScale = 2;
    vec2 rotatedPos = rotate(pos-0.5, PI) + 0.5;
    vec2 offset = vec2(0.5, 0.48);
    return
        texture(NormalFlake, pos) +
        texture(WeirdFlake, pos*weirdScale - offset) +
        texture(WeirdFlake, rotatedPos*weirdScale - offset - vec2(0, 0.08));
}

image CombinedFlake = glsl(combinedFlake, FLAKESIZE);


glsl struct ParticleData {
    float index;
    vec2 pos;
    vec2 direction;
    float phase;
    float size;
    float rot;
    float speed;
    vec3 color;
};

glsl struct VertexData {
    vec2 uv;
};

glsl float noise(float seed) {
    return perlinNoise(vec2(seed*1.35, seed/1.83));
}

glsl void initialize(out ParticleData p, int i) {
    float speed = 3.0;
    p.index = i;
    p.pos = vec2(noise(i*4)*3-1, noise(i) + 2.0);
    p.size = 1 + 0.5*noise(i*21.3);
    p.direction = vec2(0.5 + 0.5*noise(i*3.14), -speed+noise(i*40)*0.5)*0.3*p.size;
    p.speed = PI * noise(i);
}

glsl void update(inout ParticleData p, float dt) {
    p.pos += p.direction*dt;
    p.rot += p.speed*dt;

    if(p.pos.y < -1.1 || abs(p.pos.x) > 2.0) {
        initialize(p, int(p.index+1));
    }
}

glsl vec2 vertex(out VertexData v, in ParticleData p, int i) {
    float ratio = shadron_PixelSize.x/shadron_PixelSize.y;
    vec2[4] points = vec2[4](
        vec2(0.0, 0.0),
        vec2(0.0, 1.0),
        vec2(1.0, 1.0),
        vec2(1.0, 0.0)
    );
    v.uv = points[i];
    vec2 coord = (v.uv - vec2(0.5))*FlakeSize*p.size;
    return (rotate(coord, p.rot) + p.pos)*vec2(ratio, 1);
}

glsl vec3 fragment(in VertexData v) {
    return texture(CombinedFlake, v.uv);
}

const ivec2 DIMENSIONS = ivec2(1280, 720);

particle_system animation Particles :
    dimensions(DIMENSIONS),
    particle_data(ParticleData),
    fragment_data(VertexData),
    initialize(initialize),
    update(update),
    vertex(vertex, triangle_fan, 4),
    fragment(fragment),
    count(ParticleCount),
    background(vec3(0.11, 0.1, 0.11)),
    blend(max),
    map(clamp);

//animation QuantizedOutputAnimation = quantize(Particles, 32);
//export gif(QuantizedOutputAnimation, "C:\\Users\\Unkno\\Desktop\\Tmp\\Shadron\\Day_11_koch_snowflake.gif", 10, 4, true);