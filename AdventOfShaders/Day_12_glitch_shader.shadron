#extension gif
#include <perlin>

image Input = file() : map(clamp);
parameter float Shift = 1 : range(1, 2);

glsl float noise(vec2 pos) {
    float final_val = 0.5;

    int max_octaves = 16;

    float frequency = 0.6;
    float lacunarity = 2;

    float amplitude = 0.2;
    float gain = 0.5;

    for (int octave = 0; octave < max_octaves; ++octave){
        final_val += amplitude * perlinNoise(pos * frequency);
        
        frequency *= lacunarity;
        amplitude *= gain;
    }
    return final_val;
}

glsl float fbm(vec2 pos) {
    vec2 q = vec2(noise(pos + vec2(0)), noise(pos + vec2(5.2, 1.3)));
    vec2 r = vec2(noise(pos + 4*q + vec2(0)), noise(pos + 4*q + vec2(5.2, 1.3)));
    return noise(pos + 4*r);
}

glsl vec4 coolNoise(vec2 pos, float shift) {
    vec2 noisePosition = vec2(pos.y*noise(vec2(pos.x*0.000001))+noise(vec2(pos.x))*0.08, pos.y) + shift;
    float upperClamp = 0.5;
    float noise = clamp(fbm(noisePosition) + upperClamp, 1.0, 1.0 + upperClamp) - 1.0;
    return vec4(vec3(noise)*2, 1);
}


glsl vec4 noiseStatic(vec2 pos) {
    return coolNoise(pos, Shift);
}

image NoiseStatic = glsl(noiseStatic, sizeof(Input));


glsl vec4 noiseImageStatic(vec2 pos) {
    float noise = coolNoise(pos, Shift).r;
    vec3 outputImage = texture(Input, pos + vec2(noise)*0.1).rgb;
    return vec4(outputImage, 1);
}

image OutputStatic = glsl(noiseImageStatic, sizeof(Input));

glsl vec4 noiseImageAnimation(vec2 pos, float time) {
    float noise = coolNoise(pos, time*0.2).r;
    float strength = 0.05;
    vec3 outputImage = texture(Input, pos + vec2(noise)*strength - 0.5*strength).rgb;
    return vec4(outputImage, 1);
}

animation OutputAnimation = glsl(noiseImageAnimation, vec2(512, 512));//sizeof(Input));//;
//animation QuantizedOutputAnimation = quantize(OutputAnimation, 32);
//export gif(QuantizedOutputAnimation, "C:\\Users\\Unkno\\Desktop\\Tmp\\Shadron\\Day_12_glitch_shader.gif", 10, 3, true);